name: archlinux
on:
  push:
  workflow_dispatch:
env:
  FORCE_COLOR: 1
concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
jobs:
  build-qemu:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node:
          - 16
        target:
          # - armv6
          - armv7
          # - aarch64
          # - s390x
          # - ppc64le
        variant:
          - slim
    name: ${{ matrix.variant }} (node=${{ matrix.node }}, target=${{ matrix.target }})
    steps:
      - uses: actions/checkout@v3
      - uses: uraimo/run-on-arch-action@v2
        id: runcmd
        with:
          arch: ${{ matrix.target }}
          distro: ubuntu_latest
          run: |
            set -x
            uname -a
            apt-get update
            apt-get install -y curl
            curl -sL https://deb.nodesource.com/setup_20.x | bash -
            apt-get install nodejs git -y
            getconf LONG_BIT
            ldd --version
            ldd /bin/ls
            getconf GNU_LIBC_VERSION
            node -p 'process.arch'
            npm -v
            
            # file /bin/ls
            dpkg --print-architecture
            npm i -g node-pre-gyp pnpm
            npm i -g @whyour/qinglong --loglevel verbose
            export QL_DIR=/usr/lib/node_modules/@whyour/qinglong
            export QL_DATA_DIR=/usr/share/ql
            qinglong
            curl http://localhost:5700/api/public/health
            # file /lib/systemd/systemd
            echo ::set-output name=uname::$(uname -a)
      - name: Get the output
        run: |
            echo "The uname output was ${{ steps.runcmd.outputs.uname }}"

      # - name: Setup Docker Buildx
      #   uses: docker/setup-buildx-action@v2

      # - name: Add env vars
      #   shell: bash
      #   run: |
      #     echo "V=1" >> $GITHUB_ENV
          
      #     if [[ "${{ matrix.target }}" = "linux/arm/v7" ]]; then 
      #       echo "TARGET=arm" >> $GITHUB_ENV
      #     elif [ "${{ matrix.target }}" = "linux/arm64" ]; then
      #       echo "TARGET=arm64" >> $GITHUB_ENV
      #     elif [ "${{ matrix.target }}" = "linux/amd64" ]; then
      #       echo "TARGET=x64" >> $GITHUB_ENV
      #     elif [ "${{ matrix.target }}" = "linux/ppc64le" ]; then
      #       echo "TARGET=ppc64" >> $GITHUB_ENV
      #     elif [ "${{ matrix.target }}" = "linux/s390x" ]; then
      #       echo "TARGET=s390x" >> $GITHUB_ENV
      #     elif [ "${{ matrix.target }}" = "linux/386" ]; then
      #       echo "TARGET=ia32" >> $GITHUB_ENV
      #     fi

      #     cat $GITHUB_ENV

      # - name: Build binaries and test
      #   run: |
      #     docker buildx build \
      #       --file ./tools/BinaryBuilder-debian.Dockerfile \
      #       --load \
      #       --tag sqlite-builder \
      #       --platform ${{ matrix.target }} \
      #       --no-cache \
      #       --build-arg VARIANT=${{ matrix.variant }} \
      #       --build-arg TARGET=${{ env.TARGET }} \
      #       --build-arg NODE_VERSION=${{ matrix.node }} \
      #       .
      #     CONTAINER_ID=$(docker create -it sqlite-builder)
      #     docker cp $CONTAINER_ID:/usr/src/build/build/ ./build

      # - name: Upload binaries to commit artifacts
      #   uses: actions/upload-artifact@v3
      #   if: matrix.node == 16
      #   with:
      #     name: prebuilt-binaries
      #     path: build/stage/*/*
      #     retention-days: 7

      # - name: Upload binaries to GitHub Release
      #   run: yarn install --ignore-scripts && yarn node-pre-gyp-github publish --release
      #   if: matrix.node == 16
      #   env:
      #     NODE_PRE_GYP_GITHUB_TOKEN: ${{ secrets.API_TOKEN }}
